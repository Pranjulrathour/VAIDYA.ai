import { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabaseClient';
import { useSession } from '@/contexts/SessionContext';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Loader2, AlertCircle } from 'lucide-react';



interface HealthCondition {
  id: string;
  condition_name: string;
  severity: 'Mild' | 'Moderate' | 'Severe';
  notes: string;
  created_at: string;
}

const HealthMetrics = () => {
  const session = useSession();
  const [conditions, setConditions] = useState<HealthCondition[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchHealthConditions = async () => {
      try {
        setLoading(true);
        const { data, error } = await supabase
          .from('health_conditions')
          .select('*')
          .eq('user_id', session.user.id)
          .order('created_at', { ascending: false });

        if (error) {
          throw error;
        }

        if (data) {
          setConditions(data);
        }
      } catch (error: any) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    if (session) {
      fetchHealthConditions();
    }
  }, [session]);

  if (loading) {
    return (
      <div className="flex justify-center items-center p-8">
        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
      </div>
    );
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>Error</AlertTitle>
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    );
  }

  return (
    <Card className="border-0 shadow-lg bg-white/70 dark:bg-gray-900/70 backdrop-blur-sm rounded-2xl">
      <CardHeader>
        <CardTitle>Your Health Conditions</CardTitle>
      </CardHeader>
      <CardContent>
        {conditions.length > 0 ? (
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {conditions.map((condition) => (
              <Card key={condition.id} className="bg-slate-50 dark:bg-gray-800/50">
                <CardHeader>
                  <CardTitle className="flex justify-between items-center">
                    {condition.condition_name}
                    <Badge 
                      variant={condition.severity === 'Severe' ? 'destructive' : condition.severity === 'Moderate' ? 'secondary' : 'default'}
                    >
                      {condition.severity}
                    </Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-600 dark:text-gray-400">{condition.notes}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <p className="text-center text-gray-500 dark:text-gray-400 py-4">No health conditions recorded yet. Add your first one!</p>
        )}
      </CardContent>
    </Card>
  );
};

export default HealthMetrics; 
